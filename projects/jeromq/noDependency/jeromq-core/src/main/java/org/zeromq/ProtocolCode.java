package org.zeromq;

import zmq.ZMQUtilConstant;

import java.util.HashMap;
import java.util.Map;

/**
 * The code returned by handshake events, as generated by <code>eventHandshakeXXX</code>.
 */
public enum ProtocolCode {
    ZMQ_PROTOCOL_ERROR_ZMTP_UNSPECIFIED(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_UNSPECIFIED),
    ZMQ_PROTOCOL_ERROR_ZMTP_UNEXPECTED_COMMAND(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_UNEXPECTED_COMMAND),
    ZMQ_PROTOCOL_ERROR_ZMTP_INVALID_SEQUENCE(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_INVALID_SEQUENCE),
    ZMQ_PROTOCOL_ERROR_ZMTP_KEY_EXCHANGE(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_KEY_EXCHANGE),
    ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_UNSPECIFIED(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_UNSPECIFIED),
    ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_MESSAGE(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_MESSAGE),
    ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_HELLO(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_HELLO),
    ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_INITIATE(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_INITIATE),
    ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_ERROR(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_ERROR),
    ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_READY(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_READY),
    ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_WELCOME(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_WELCOME),
    ZMQ_PROTOCOL_ERROR_ZMTP_INVALID_METADATA(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_INVALID_METADATA),
    ZMQ_PROTOCOL_ERROR_ZMTP_CRYPTOGRAPHIC(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_CRYPTOGRAPHIC),
    ZMQ_PROTOCOL_ERROR_ZMTP_MECHANISM_MISMATCH(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZMTP_MECHANISM_MISMATCH),
    ZMQ_PROTOCOL_ERROR_ZAP_UNSPECIFIED(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZAP_UNSPECIFIED),
    ZMQ_PROTOCOL_ERROR_ZAP_MALFORMED_REPLY(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZAP_MALFORMED_REPLY),
    ZMQ_PROTOCOL_ERROR_ZAP_BAD_REQUEST_ID(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZAP_BAD_REQUEST_ID),
    ZMQ_PROTOCOL_ERROR_ZAP_BAD_VERSION(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZAP_BAD_VERSION),
    ZMQ_PROTOCOL_ERROR_ZAP_INVALID_STATUS_CODE(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZAP_INVALID_STATUS_CODE),
    ZMQ_PROTOCOL_ERROR_ZAP_INVALID_METADATA(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_ZAP_INVALID_METADATA),
    ZMQ_PROTOCOL_ERROR_WS_UNSPECIFIED(ZMQUtilConstant.ZMQ_PROTOCOL_ERROR_WS_UNSPECIFIED);

    private static final Map<Integer, ProtocolCode> MAP = new HashMap<>(ProtocolCode.values().length);

    static {
        for (ProtocolCode e : ProtocolCode.values()) {
            MAP.put(e.code, e);
        }
    }

    private final int code;

    ProtocolCode(int code) {
        this.code = code;
    }

    /**
     * Find the {@link ProtocolCode} associated with the numerical error code send with <code>eventHandshakeXXX</code>.
     *
     * @param code the numerical error code
     * @return the found {@link ProtocolCode}
     */
    public static ProtocolCode findByCode(int code) {
        if (MAP.containsKey(code)) {
            return MAP.get(code);
        } else {
            throw new IllegalArgumentException("Protocol code unknown: " + code);
        }
    }
}
